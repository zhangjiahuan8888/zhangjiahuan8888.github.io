<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张家欢</title>
  <subtitle>竹杖芒鞋轻胜马，谁怕？一蓑代码任平生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="zhangjiahuan.cn/"/>
  <updated>2016-08-26T06:37:05.000Z</updated>
  <id>zhangjiahuan.cn/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WKWebView来代替UIWebView</title>
    <link href="zhangjiahuan.cn/2016/08/26/WKWebView%E6%9D%A5%E4%BB%A3%E6%9B%BFUIWebView/"/>
    <id>zhangjiahuan.cn/2016/08/26/WKWebView来代替UIWebView/</id>
    <published>2016-08-26T06:14:35.000Z</published>
    <updated>2016-08-26T06:37:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以前加载网页视图一直使用UIWebView，因为一直没有过太复杂的网页，所以没有遇到占用内存过大的问题。昨天有人问我UIWebView内存处理问题，一时也不知如何回答，后来想起iOS8发布的WebKit框架中WKWebView进行了大幅优化，可以减小内存的占用及加载速度也更快，因此进行了小的尝试，果然WKWebView的提升很明显，简直大爱。。</p>
<h3 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a>先看效果</h3><p><img src="http://ww3.sinaimg.cn/large/c05ce1e9gw1f76zip8fnoj207a04waae.jpg" alt="使用UIWebView内存占用"><img src="http://ww2.sinaimg.cn/large/c05ce1e9gw1f76ziy6enjj207804vt93.jpg" alt="使用WKWebView内存占用"></p>
<p>测试网页使用的是中关村首页，相对图片较多、较复杂。使用UIWebView占用内存为40兆上下，使用了WKWebView之后占用内存不到10兆，简直要飞起的节奏啊</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>导入#import <webkit webkit.h=""></webkit></p>
<p>初始化并加载url</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//初始化WKWebView</div><div class="line">WKWebView *webView = [[WKWebView alloc] initWithFrame:CGRectMake(0, 64, SCREEN_WIDTH, SCREEN_HEIGHT)]; </div><div class="line">[self addSubview:webView];</div><div class="line">//加载url</div><div class="line">[webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;http://www.zol.com.cn&quot;]]];</div></pre></td></tr></table></figure>
<p>WKWebView代理: WKNavigationDelegate、WKUIDelegate和WKScriptMessageHandler。</p>
<h3 id="1-WKNavigationDelegate"><a href="#1-WKNavigationDelegate" class="headerlink" title="1.WKNavigationDelegate"></a>1.WKNavigationDelegate</h3><p>（该代理提供的方法，可以用来追踪加载过程（页面开始加载、加载完成、加载失败）、决定是否执行跳转。）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 页面开始加载时调用</div><div class="line">- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(WKNavigation *)navigation;</div><div class="line">// 当内容开始返回时调用</div><div class="line">- (void)webView:(WKWebView *)webView didCommitNavigation:(WKNavigation *)navigation;</div><div class="line">// 页面加载完成之后调用</div><div class="line">- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation;</div><div class="line">// 页面加载失败时调用</div><div class="line">- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(WKNavigation *)navigation;</div></pre></td></tr></table></figure>
<p>页面跳转的代理方法有三种，分为（收到跳转与决定是否跳转两种）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 接收到服务器跳转请求之后调用</div><div class="line">- (void)webView:(WKWebView *)webView didReceiveServerRedirectForProvisionalNavigation:(WKNavigation *)navigation;</div><div class="line">// 在收到响应后，决定是否跳转</div><div class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationResponse:(WKNavigationResponse *)navigationResponse decisionHandler:(void (^)(WKNavigationResponsePolicy))decisionHandler;</div><div class="line">// 在发送请求之前，决定是否跳转</div><div class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler;</div></pre></td></tr></table></figure>
<h3 id="2-WKUIDelegate"><a href="#2-WKUIDelegate" class="headerlink" title="2.WKUIDelegate"></a>2.WKUIDelegate</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 创建一个新的WebView</div><div class="line">- (WKWebView *)webView:(WKWebView *)webView createWebViewWithConfiguration:(WKWebViewConfiguration *)configuration forNavigationAction:(WKNavigationAction *)navigationAction windowFeatures:(WKWindowFeatures *)windowFeatures;	</div><div class="line">//关闭WKWebView</div><div class="line">- (void)webViewDidClose:(WKWebView *)webView NS_AVAILABLE(10_11, 9_0);</div><div class="line">//对应js的Alert方法</div><div class="line">/**</div><div class="line"> *  web界面中有弹出警告框时调用</div><div class="line"> *</div><div class="line"> *  @param webView           实现该代理的webview</div><div class="line"> *  @param message           警告框中的内容</div><div class="line"> *  @param frame             主窗口</div><div class="line"> *  @param completionHandler 警告框消失调用</div><div class="line"> */</div><div class="line">- (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler;</div><div class="line">//对应js的confirm方法</div><div class="line">- (void)webView:(WKWebView *)webView runJavaScriptConfirmPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(BOOL result))completionHandler;</div><div class="line">//对应js的prompt方法</div><div class="line">- (void)webView:(WKWebView *)webView runJavaScriptTextInputPanelWithPrompt:(NSString *)prompt defaultText:(nullable NSString *)defaultText initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(NSString * __nullable result))completionHandler;</div></pre></td></tr></table></figure>
<h3 id="3-WKScriptMessageHandler"><a href="#3-WKScriptMessageHandler" class="headerlink" title="3.WKScriptMessageHandler"></a>3.WKScriptMessageHandler</h3><p>这个协议中包含一个必须实现的方法，这个方法是提高App与web端交互的关键，它可以直接将接收到的JS脚本转为OC或Swift对象。（当然，在UIWebView也可以通过“曲线救国”的方式与web进行交互，著名的Cordova框架就是这种机制）</p>
<p>从协议中我们可以看出这里使用了两个类WKUserContentController和WKScriptMessage。WKUserContentController可以理解为调度器，WKScriptMessage则是携带的数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 从web界面中接收到一个脚本时调用</div><div class="line">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;以前加载网页视图一直使用UIWebView，因为一直没有过太复杂的网页，所以没有遇到占用内存过大的问题。昨天有人问我UIWebView内存处
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift之去掉UITableView headerView黏性</title>
    <link href="zhangjiahuan.cn/2016/08/22/Swift%E4%B9%8B%E5%8E%BB%E6%8E%89UItableview-headerview%E9%BB%8F%E6%80%A7%20/"/>
    <id>zhangjiahuan.cn/2016/08/22/Swift之去掉UItableview-headerview黏性 /</id>
    <published>2016-08-22T09:43:07.000Z</published>
    <updated>2016-08-24T01:30:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用TableView中style设置成plain模式，在数据源代理中又有section分组就会出现如下的效果（每个section的头视图会有浮动效果，也称headerview黏性 ），但如果我们不想让他浮动（或有黏性），可以在scrollview的代理中实现如下代码，即可实现我们想要的效果。</p>
<p><img src="http://ww1.sinaimg.cn/large/c05ce1e9gw1f74kr6032eg208w0fse81.gif" alt="实现前"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">override func scrollViewDidScroll(scrollView: UIScrollView) &#123;</div><div class="line">        if scrollView == self.tableView  &#123;</div><div class="line">            let sectionHeaderHeight = CGFloat(50)</div><div class="line">            if (scrollView.contentOffset.y&lt;=sectionHeaderHeight&amp;&amp;scrollView.contentOffset.y&gt;=0) &#123;</div><div class="line">                    scrollView.contentInset = UIEdgeInsetsMake(-scrollView.contentOffset.y, 0, 0, 0);</div><div class="line">                    &#125; else if (scrollView.contentOffset.y&gt;=sectionHeaderHeight) &#123;</div><div class="line">                    scrollView.contentInset = UIEdgeInsetsMake(-sectionHeaderHeight, 0, 0, 0);</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/c05ce1e9gw1f74ksqb421g208w0fsu0z.gif" alt="实现后"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用TableView中style设置成plain模式，在数据源代理中又有section分组就会出现如下的效果（每个section的头视图会有浮动效果，也称headerview黏性 ），但如果我们不想让他浮动（或有黏性），可以在scrollview的代理中实现如下代码，即
    
    </summary>
    
      <category term="iOS" scheme="zhangjiahuan.cn/categories/iOS/"/>
    
    
      <category term="swift" scheme="zhangjiahuan.cn/tags/swift/"/>
    
      <category term="headerView" scheme="zhangjiahuan.cn/tags/headerView/"/>
    
  </entry>
  
  <entry>
    <title>最初的起点</title>
    <link href="zhangjiahuan.cn/2016/08/15/%E6%9C%80%E5%88%9D%E7%9A%84%E8%B5%B7%E7%82%B9/"/>
    <id>zhangjiahuan.cn/2016/08/15/最初的起点/</id>
    <published>2016-08-15T07:35:28.000Z</published>
    <updated>2016-08-22T06:13:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个程序员，一直都在简书、CSDN、cocoachina上面写博客，但总觉得自己的博客还是归属别人管理，而作为一个标准的程序员我觉得一定要有自己的个人站点，因此一狠心，一无所有的情况下先去万网花钱买了本域名    <a href="zhangjiahuan.cn">zhangjiahuan.cn</a> 。</p>
<p>域名都买了，就没有拖延的理由了，那就说做就做，最近刚好在看《拖延心理学》，之前在github page创建了一个网站，不过样式太过low，因此百度其他资料，找到目前在用的基于node的静态博客框架hexo，安装遇到各种问题，花了整整一天时间终于搞定，可以正常访问，写下第一篇博客。</p>
<p>以后工作中的技术文章，生活感悟都写在该博客，记录下技术的成长，同时也记录下生活的点滴，算是给未来留下回忆。。。</p>
<p>以最好的姿态迎接最美好的明天！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个程序员，一直都在简书、CSDN、cocoachina上面写博客，但总觉得自己的博客还是归属别人管理，而作为一个标准的程序员我觉得一定要有自己的个人站点，因此一狠心，一无所有的情况下先去万网花钱买了本域名    &lt;a href=&quot;zhangjiahuan.cn&quot;&gt;zh
    
    </summary>
    
      <category term="生活" scheme="zhangjiahuan.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="起点" scheme="zhangjiahuan.cn/tags/%E8%B5%B7%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="zhangjiahuan.cn/2016/08/15/hello-world/"/>
    <id>zhangjiahuan.cn/2016/08/15/hello-world/</id>
    <published>2016-08-15T06:07:45.000Z</published>
    <updated>2016-08-15T06:07:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
